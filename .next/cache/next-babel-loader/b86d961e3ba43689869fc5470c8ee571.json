{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst Promise = require('bluebird');\n\nclass PlayersDB {\n  constructor(dbFilePath) {\n    this.db = new sqlite3.Database(dbFilePath, err => {\n      if (err) {\n        console.log(\"cna't connect to database\", err);\n      } else {\n        console.log(\"connected to database\");\n      }\n    });\n  }\n\n  get(query, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.get(query, params, (err, result) => {\n        if (err) {\n          console.log('Error running sql: ' + query);\n          console.log(err);\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  all(query, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.all(query, params, (err, rows) => {\n        if (err) {\n          console.log('Error running sql: ' + query);\n          console.log(err);\n          reject(err);\n        } else {\n          console.log(rows);\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = PlayersDB;","map":{"version":3,"sources":["/Users/sangjunahn/Desktop/Coding/fmdb_v2/db/playersDB.js"],"names":["sqlite3","require","Promise","PlayersDB","constructor","dbFilePath","db","Database","err","console","log","get","query","params","resolve","reject","result","all","rows","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAGA,MAAME,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKC,EAAL,GAAU,IAAIN,OAAO,CAACO,QAAZ,CAAqBF,UAArB,EAAkCG,GAAD,IAAS;AAChD,UAAIA,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;AACJ,KANS,CAAV;AAOH;;AAEDC,EAAAA,GAAG,CAACC,KAAD,EAAQC,MAAM,GAAG,EAAjB,EAAqB;AACpB,WAAO,IAAIX,OAAJ,CAAY,CAACY,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKT,EAAL,CAAQK,GAAR,CAAYC,KAAZ,EAAmBC,MAAnB,EAA2B,CAACL,GAAD,EAAMQ,MAAN,KAAiB;AACxC,YAAIR,GAAJ,EAAS;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBE,KAApC;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAO,UAAAA,MAAM,CAACP,GAAD,CAAN;AACH,SAJD,MAIO;AACHM,UAAAA,OAAO,CAACE,MAAD,CAAP;AACH;AACJ,OARD;AASH,KAVM,CAAP;AAWH;;AAEDC,EAAAA,GAAG,CAACL,KAAD,EAAQC,MAAM,GAAG,EAAjB,EAAqB;AACpB,WAAO,IAAIX,OAAJ,CAAY,CAACY,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKT,EAAL,CAAQW,GAAR,CAAYL,KAAZ,EAAmBC,MAAnB,EAA2B,CAACL,GAAD,EAAMU,IAAN,KAAe;AACtC,YAAIV,GAAJ,EAAS;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBE,KAApC;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAO,UAAAA,MAAM,CAACP,GAAD,CAAN;AACH,SAJD,MAIO;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACAJ,UAAAA,OAAO,CAACI,IAAD,CAAP;AACH;AACJ,OATD;AAUH,KAXM,CAAP;AAYH;;AAtCW;;AA0ChBC,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["const sqlite3 = require('sqlite3');\nconst Promise = require('bluebird');\n\n\nclass PlayersDB {\n    constructor(dbFilePath) {\n        this.db = new sqlite3.Database(dbFilePath, (err) => {\n            if (err) {\n                console.log(\"cna't connect to database\", err);\n            } else {\n                console.log(\"connected to database\");\n            }\n        })\n    }\n\n    get(query, params = []) {\n        return new Promise((resolve, reject) => {\n            this.db.get(query, params, (err, result) => {\n                if (err) {\n                    console.log('Error running sql: ' + query)\n                    console.log(err)\n                    reject(err)\n                } else {\n                    resolve(result)\n                }\n            })\n        })\n    }\n\n    all(query, params = []) {\n        return new Promise((resolve, reject) => {\n            this.db.all(query, params, (err, rows) => {\n                if (err) {\n                    console.log('Error running sql: ' + query);\n                    console.log(err);\n                    reject(err)\n                } else {\n                    console.log(rows);\n                    resolve(rows);\n                }\n            })\n        })\n    }\n}\n\n\nmodule.exports = PlayersDB;"]},"metadata":{},"sourceType":"script"}
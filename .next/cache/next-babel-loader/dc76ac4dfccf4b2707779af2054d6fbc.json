{"ast":null,"code":"var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar sqlite3 = require('sqlite3');\n\nvar Promise = require('bluebird');\n\nvar PlayersDB = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function PlayersDB(dbFilePath) {\n    _classCallCheck(this, PlayersDB);\n\n    this.db = new sqlite3.Database(dbFilePath, function (err) {\n      if (err) {\n        console.log(\"cna't connect to database\", err);\n      } else {\n        console.log(\"connected to database\");\n      }\n    });\n  }\n\n  _createClass(PlayersDB, [{\n    key: \"get\",\n    value: function get(query) {\n      var _this = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return new Promise(function (resolve, reject) {\n        _this.db.get(query, params, function (err, result) {\n          if (err) {\n            console.log('Error running sql: ' + query);\n            console.log(err);\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"all\",\n    value: function all(query) {\n      var _this2 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return new Promise(function (resolve, reject) {\n        _this2.db.all(query, params, function (err, rows) {\n          if (err) {\n            console.log('Error running sql: ' + query);\n            console.log(err);\n            reject(err);\n          } else {\n            console.log(rows);\n            resolve(rows);\n          }\n        });\n      });\n    }\n  }]);\n\n  return PlayersDB;\n}();\n\nmodule.exports = PlayersDB;","map":{"version":3,"sources":["/Users/sangjunahn/Desktop/Coding/fmdb_v2/db/playersDB.js"],"names":["sqlite3","require","Promise","PlayersDB","dbFilePath","db","Database","err","console","log","query","params","resolve","reject","get","result","all","rows","module","exports"],"mappings":";;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;IAGME,S;;;AACF,qBAAYC,UAAZ,EAAwB;AAAA;;AACpB,SAAKC,EAAL,GAAU,IAAIL,OAAO,CAACM,QAAZ,CAAqBF,UAArB,EAAiC,UAACG,GAAD,EAAS;AAChD,UAAIA,GAAJ,EAAS;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;AACJ,KANS,CAAV;AAOH;;;;wBAEGC,K,EAAoB;AAAA;;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AACpB,aAAO,IAAIT,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAA,KAAI,CAACR,EAAL,CAAQS,GAAR,CAAYJ,KAAZ,EAAmBC,MAAnB,EAA2B,UAACJ,GAAD,EAAMQ,MAAN,EAAiB;AACxC,cAAIR,GAAJ,EAAS;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBC,KAApC;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAM,YAAAA,MAAM,CAACN,GAAD,CAAN;AACH,WAJD,MAIO;AACHK,YAAAA,OAAO,CAACG,MAAD,CAAP;AACH;AACJ,SARD;AASH,OAVM,CAAP;AAWH;;;wBAEGL,K,EAAoB;AAAA;;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AACpB,aAAO,IAAIT,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAA,MAAI,CAACR,EAAL,CAAQW,GAAR,CAAYN,KAAZ,EAAmBC,MAAnB,EAA2B,UAACJ,GAAD,EAAMU,IAAN,EAAe;AACtC,cAAIV,GAAJ,EAAS;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBC,KAApC;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAM,YAAAA,MAAM,CAACN,GAAD,CAAN;AACH,WAJD,MAIO;AACHC,YAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACAL,YAAAA,OAAO,CAACK,IAAD,CAAP;AACH;AACJ,SATD;AAUH,OAXM,CAAP;AAYH;;;;;;AAILC,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["const sqlite3 = require('sqlite3');\nconst Promise = require('bluebird');\n\n\nclass PlayersDB {\n    constructor(dbFilePath) {\n        this.db = new sqlite3.Database(dbFilePath, (err) => {\n            if (err) {\n                console.log(\"cna't connect to database\", err);\n            } else {\n                console.log(\"connected to database\");\n            }\n        })\n    }\n\n    get(query, params = []) {\n        return new Promise((resolve, reject) => {\n            this.db.get(query, params, (err, result) => {\n                if (err) {\n                    console.log('Error running sql: ' + query)\n                    console.log(err)\n                    reject(err)\n                } else {\n                    resolve(result)\n                }\n            })\n        })\n    }\n\n    all(query, params = []) {\n        return new Promise((resolve, reject) => {\n            this.db.all(query, params, (err, rows) => {\n                if (err) {\n                    console.log('Error running sql: ' + query);\n                    console.log(err);\n                    reject(err)\n                } else {\n                    console.log(rows);\n                    resolve(rows);\n                }\n            })\n        })\n    }\n}\n\n\nmodule.exports = PlayersDB;"]},"metadata":{},"sourceType":"script"}